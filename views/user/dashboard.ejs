<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <style>
        :root {
            --bs-success-rgb: 45, 90, 39;
            --bs-success-light-rgb: 232, 245, 233;
        }

        /* Floating button to open chatbot */
        .chat-toggle-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: rgba(var(--bs-success-rgb), 1);
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

        .chat-toggle-btn:hover {
            background-color: rgb(38, 77, 32);
        }

        /* Chat container */
        .chat-container {
            position: fixed;
            bottom: 80px;
            right: 20px;
            width: 400px;
            height: 600px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            display: none;
            flex-direction: column;
            transition: transform 0.3s ease-in-out;
        }

        .chat-header {
            background-color: rgba(var(--bs-success-rgb), 1);
            color: white;
            text-align: center;
            padding: 10px;
            font-size: 18px;
            font-weight: bold;
        }

        #chat-box {
            flex-grow: 1;
            padding: 10px;
            overflow-y: auto;
            background-color: #f8f9fa;
        }

        .user-message,
        .bot-message {
            max-width: 75%;
            padding: 8px 12px;
            border-radius: 10px;
            margin-bottom: 8px;
            word-wrap: break-word;
        }

        .user-message {
            background-color: rgba(var(--bs-success-light-rgb), 1);
            align-self: flex-end;
            color: black;
        }

        .bot-message {
            background-color: white;
            align-self: flex-start;
            color: black;
            box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);
        }

        .chat-footer {
            display: flex;
            align-items: center;
            padding: 10px;
            background: white;
            border-top: 1px solid #ddd;
        }

        #user-input {
            flex-grow: 1;
            padding: 8px;
            border: 1px solid rgba(var(--bs-success-rgb), 0.5);
            border-radius: 5px;
        }

        #send-btn,
        #voice-btn {
            background-color: rgba(var(--bs-success-rgb), 1);
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
            margin-left: 5px;
            cursor: pointer;
        }

        #send-btn:hover,
        #voice-btn:hover {
            background-color: rgb(38, 77, 32);
        }

        /* Pulse effect for voice button when recording */
@keyframes pulse {
    0% {
        transform: scale(1);
        box-shadow: 0 0 5px rgba(45, 90, 39, 0.8);
    }
    50% {
        transform: scale(1.1);
        box-shadow: 0 0 15px rgba(45, 90, 39, 0.9);
    }
    100% {
        transform: scale(1);
        box-shadow: 0 0 5px rgba(45, 90, 39, 0.8);
    }
}

/* Default voice button */
#voice-btn {
    transition: background-color 0.3s ease, transform 0.2s ease;
}

/* Active state when recording */
#voice-btn.recording {
    background-color: rgb(255, 50, 50) !important; /* Red when active */
    animation: pulse 1s infinite; /* Pulsing effect */
}

    </style>
</head>
<body>
    <h1>Welcome, <%= user.name %></h1>

    <ul>
        <li><a href="/user/<%= user._id %>/profile">Profile</a></li>
        <li><a href="/user/<%= user._id %>/apply-request">Apply Request</a></li>
        <li><a href="/user/<%= user._id %>/check-request">Check Request</a></li>
        <li><a href="/user/<%= user._id %>/reward">Reward</a></li>
        <li><a href="/user/<%= user._id %>/community">Community</a></li>
        <li><a href="/user/<%= user._id %>/store">Store</a></li>
        <li><a href="/user/<%= user._id %>/order">Your Orders</a></li>
    </ul>

    <button class="chat-toggle-btn" id="toggle-chat" data-bs-toggle="modal" data-bs-target="#chatbotModal">
        <i class="fas fa-comment"></i>
    </button>

    <!-- Chatbot UI -->
    <div class="chat-container" id="chat-container">
        <div class="chat-header">
            Myself EcoBuddy!
            <p class="small mb-0">Ask me about recycling and waste management!</p>
        </div>

        <div id="chat-box" class="d-flex flex-column"></div>

        <div class="chat-footer">
            <input type="text" id="user-input" class="form-control" placeholder="Type your message...">
            <button id="voice-btn"><i class="fas fa-microphone"></i></button>
            <button id="send-btn">Send</button>
        </div>
    </div>
    <div class="container">
        <h1>Feedback</h1>
        <form action="/user/<%= user._id %>/feedback" method="POST">
            <div class="mb-3">
                <label for="feedback" class="form-label">Feedback</label>
                <textarea class="form-control" id="feedback" name="feedback[content]" rows="3" required></textarea>
            </div>
            <div class="mb-3">
                <label for="feedback" class="form-label">Rating</label>
                <input type="range" min="1" max="5" class="form-control" id="feedback" name="feedback[rating]" rows="3" required/>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
    </div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>  
<script>
    const chatBox = document.getElementById("chat-box");
    const userInput = document.getElementById("user-input");
    const sendBtn = document.getElementById("send-btn");
    const voiceBtn = document.getElementById("voice-btn");
    const chatContainer = document.getElementById("chat-container");
    const toggleChatBtn = document.getElementById("toggle-chat");
    let isVoiceInput = false;

    // Toggle Chatbot Visibility
    toggleChatBtn.addEventListener("click", () => {
        if (chatContainer.style.display === "none" || chatContainer.style.display === "") {
            chatContainer.style.display = "flex";
        } else {
            chatContainer.style.display = "none";
        }
    });

    // Send message when button clicked
    sendBtn.addEventListener("click", function () {
        isVoiceInput = false;
        sendMessage();
    });

    // Send message on Enter key press
    userInput.addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
            isVoiceInput = false;
            sendMessage();
        }
    });

    voiceBtn.addEventListener("click", startVoiceRecognition);

    async function sendMessage() {
        let message = userInput.value.trim();
        if (!message) return;

        addMessage("You: " + message, "user-message");

        // Clear input field immediately
        userInput.value = "";

        const response = await fetch("/chat", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message })
        });

        const data = await response.json();
        addMessage("Bot: " + data.reply, "bot-message");

        if (isVoiceInput) {
            speakResponse(data.reply);
        }
    }

    function addMessage(text, className) {
        let messageDiv = document.createElement("div");
        messageDiv.className = className;
        messageDiv.innerHTML = formatMessage(text);  // Ensure proper formatting
        chatBox.appendChild(messageDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    function formatMessage(text) {
        return text.replace(/\n/g, "<br>"); // Preserve line breaks
    }

    function startVoiceRecognition() {
        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
        recognition.lang = "en-US";

        // Add recording effect
        voiceBtn.classList.add("recording");

        recognition.start();

        recognition.onresult = function (event) {
            isVoiceInput = true;
            const userInputText = event.results[0][0].transcript;
            userInput.value = userInputText;
            sendMessage();
        };

        recognition.onend = function () {
            // Remove recording effect when done
            voiceBtn.classList.remove("recording");
        };

        recognition.onerror = function (event) {
            console.error("Voice recognition error:", event.error);
            voiceBtn.classList.remove("recording");
        };
    }

    function speakResponse(text) {
        const utterance = new SpeechSynthesisUtterance(removeEmojis(text));
        utterance.lang = "en-US";
        speechSynthesis.speak(utterance);
    }

    function removeEmojis(text) {
        return text.replace(/[\u{1F300}-\u{1F6FF}\u{1F900}-\u{1F9FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu, '');
    }

</script>
 
   
</body>
</html>
