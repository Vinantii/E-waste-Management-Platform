<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Track Request</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Afacad:ital,wght@0,400..700;1,400..700&family=Anek+Latin:wght@100..800&family=Manrope:wght@200..800&family=Michroma&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto:ital,wght@0,100..900;1,100..900&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link rel="stylesheet" href="/styles/user/track-request.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
</head>
<body>
    <div class="background">
        <img src="/images/logo.png" alt="logo" id="logo">
    <div class="container">
        <div class="content-wrapper">
            <div class="row">
                <!-- Request Details -->
                <div class="col-md-4">
                    <div class="request-details card mb-4">
                        <div class="card-header bg-white">
                            <h5 class="mb-0">Request Details #<%= request._id.toString().slice(-6) %></h5>
                        </div>
                        <div class="card-body">
                            <p class="mb-3">
                                <strong>Status:</strong> 
                                <span class="badge status-badge <%= 
                                    request.status === 'Pending' ? 'bg-warning' : 
                                    request.status === 'Completed' ? 'bg-success' : 
                                    'bg-primary' %>">
                                    <%= request.status %>
                                </span>
                            </p>
                            <p class="mb-2"><strong>Waste Types:</strong> <%= request.wasteType.join(', ') %></p>
                            <p class="mb-2"><strong>Quantity:</strong> <%= request.quantity %></p>
                            <p class="mb-2"><strong>Pickup Address:</strong> <%= request.pickupAddress %></p>
                            <p class="mb-2"><strong>Agency:</strong> <%= request.agency.name %></p>
                            <% if (request.volunteerAssigned) { %>
                                <p class="mb-0"><strong>Assigned Volunteer:</strong> <%= request.volunteerAssigned.name %></p>
                            <% } %>
                        </div>
                    </div>
                    
                    <div class="text-center">
                        <% if (currentUser) { %>
                            <a href="/user/<%= currentUser._id %>/check-request" class="btn btn-secondary">
                                <i class="bi bi-arrow-left"></i> Back to Requests
                            </a>
                        <% } else { %>
                            <a href="/login" class="btn btn-secondary">
                                <i class="bi bi-arrow-left"></i> Back to Login
                            </a>
                        <% } %>
                    </div>
                </div>

                <!-- Tracking Timeline -->
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header bg-white">
                            <h5 class="mb-0">Tracking Timeline</h5>
                        </div>
                        <div class="card-body tracking-timeline">
                            <% const milestones = [
                                { key: 'requestReceived', label: 'Request Received', icon: 'bi-file-earmark-check' },
                                { key: 'agencyAccepted', label: 'Agency Accepted', icon: 'bi-building-check' },
                                { key: 'volunteerAssigned', label: 'Volunteer Assigned', icon: 'bi-person-check' },
                                { key: 'pickupScheduled', label: 'Pickup Scheduled', icon: 'bi-calendar-check' },
                                { key: 'pickupStarted', label: 'Pickup Started', icon: 'bi-truck' },
                                { key: 'pickupCompleted', label: 'Pickup Completed', icon: 'bi-box-seam' },
                                { key: 'wasteSegregated', label: 'Waste Segregated', icon: 'bi-recycle' },
                                { key: 'processingStarted', label: 'Processing Started', icon: 'bi-gear' },
                                { key: 'processingCompleted', label: 'Processing Completed', icon: 'bi-check-circle' }
                            ]; %>

                            <% milestones.forEach((milestone, index) => { %>
                                <div class="tracking-step <%= 
                                    request.trackingMilestones[milestone.key] && 
                                    request.trackingMilestones[milestone.key].completed ? 'completed' : '' %>"
                                    <% if (request.trackingMilestones[milestone.key]?.location?.coordinates) { %>
                                        onclick="focusLocation(
                                            <%= request.trackingMilestones[milestone.key].location.coordinates[1] %>,
                                            <%= request.trackingMilestones[milestone.key].location.coordinates[0] %>,
                                            '<%= milestone.label %>',
                                            '<%= request.trackingMilestones[milestone.key].location.address %>',
                                            '<%= request.trackingMilestones[milestone.key].timestamp %>'
                                        )"
                                        style="cursor: pointer;"
                                    <% } %>
                                >
                                    <div class="step-icon <%= 
                                        request.trackingMilestones[milestone.key] && 
                                        request.trackingMilestones[milestone.key].completed ? 'completed' : '' %>">
                                        <i class="bi <%= milestone.icon %>"></i>
                                    </div>
                                    <div class="step-content">
                                        <h6><%= milestone.label %></h6>
                                        <% if (request.trackingMilestones[milestone.key] && request.trackingMilestones[milestone.key].completed) { %>
                                            <small>
                                                <%= new Date(request.trackingMilestones[milestone.key].timestamp).toLocaleString() %>
                                            </small>
                                            <% if (request.trackingMilestones[milestone.key].notes) { %>
                                                <p class="text-muted mb-1">
                                                    <%= request.trackingMilestones[milestone.key].notes %>
                                                </p>
                                            <% } %>
                                            <% if (request.trackingMilestones[milestone.key].location && request.trackingMilestones[milestone.key].location.address) { %>
                                                <p class="text-muted mb-0">
                                                    <i class="bi bi-geo-alt"></i> 
                                                    <%= request.trackingMilestones[milestone.key].location.address %>
                                                </p>
                                            <% } %>
                                        <% } else { %>
                                            <small class="text-muted">Pending</small>
                                        <% } %>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        // Custom marker icon
        const customIcon = L.icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        // Create a polyline to connect markers in chronological order
        const coordinates = [];
        
        // Initialize the map
        const map = L.map('tracking-map').setView([20.5937, 78.9629], 4); // Default center of India

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        // Create markers for each completed milestone with location
        const markers = [];
        milestones.forEach((milestone, index) => { 
            const ms = request.trackingMilestones[milestone.key];
            if (ms && ms.completed && ms.location && ms.location.coordinates) { 
                const latLng = [ms.location.coordinates[1], ms.location.coordinates[0]];
                coordinates.push(latLng);
                
                const marker = L.marker(latLng, { icon: customIcon }).addTo(map);
                
                marker.bindPopup(`
                    <b>${milestone.label}</b><br>
                    ${ms.location.address}<br>
                    <small>${new Date(ms.timestamp).toLocaleString()}</small>
                `);
                
                markers.push(marker); 
            }
        });

        // Add a polyline connecting all markers in sequence
        if (coordinates.length > 1) {
            const polyline = L.polyline(coordinates, {
                color: '#28a745',
                weight: 3,
                opacity: 0.7,
                dashArray: '10, 10'
            }).addTo(map);
        }

        // If we have markers, fit the map bounds to show all markers
        if (markers.length > 0) {
            const group = new L.featureGroup(markers);
            map.fitBounds(group.getBounds().pad(0.1));
        }

        // Function to update map view when clicking on a milestone
        function focusLocation(lat, lng, label, address, timestamp) {
            map.setView([lat, lng], 15);
            L.popup()
                .setLatLng([lat, lng])
                .setContent(`
                    <b>${label}</b><br>
                    ${address}<br>
                    <small>${new Date(timestamp).toLocaleString()}</small>
                `)
                .openOn(map);
        }
    </script>
</body>
</html> 